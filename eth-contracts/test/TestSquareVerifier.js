// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var Verifier = artifacts.require('Verifier');

contract('Verifier', accounts => {

    const account_one = accounts[0];
    

    describe('Verifier Test', function () {
        beforeEach(async function () {
            this.contract = await Verifier.new({ from: account_one });

        })

        // Test verification with correct proof
        // - use the contents from proof.json generated from zokrates steps
        it('Test verification with correct proof', async function () {
            // for (let i=0; i<10; i++) {
                let i = 1;
                console.log(`Verifying NFT#${i}`)
                let proof = require(`./proof${i}`);
                console.log(proof.proof.A);
                let result = await this.contract.verifyTx.call(
                    proof.proof.A,
                    proof.proof.A_p,
                    proof.proof.B,
                    proof.proof.B_p,
                    proof.proof.C,
                    proof.proof.C_p,
                    proof.proof.H,
                    proof.proof.K,
                    proof.input,
                    { from: account_one }
                );
                assert.equal(result, true, "Test verification with correct proof should passed");
            // }
        });

        // Test verification with incorrect proof
        it('Test verification with incorrect proof', async function () { 
            let proof = require(`./proof0`);
            let result = await this.contract.verifyTx.call(
                proof.proof.A,
                proof.proof.A_p,
                proof.proof.B,
                proof.proof.B_p,
                proof.proof.C,
                proof.proof.C_p,
                proof.proof.H,
                proof.proof.K,
                [0, 0]
            );
            assert.equal(result, false, "Test verification with correct proof should passed");
        });
    });
});